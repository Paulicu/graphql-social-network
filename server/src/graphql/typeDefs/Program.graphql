type Program {

    _id: ID!
    authorId: ID!
    author: User!
    title: String!
    goal: String!
    createdAtFormatted: String!
    updatedAtFormatted: String!
    ratings: [Rating]
    averageRating: Float
    totalWorkouts: Int
    totalRatings: Int
    days: [Day!]
}

type Day {

    dayNumber: Int!
    workoutId: ID
    workout: Workout
    isRestDay: Boolean!
}

input ProgramInput {

    title: String!
    goal: String!
    days: [DayInput!]!
}

input DayInput {

    workoutId: ID
}

type Query {

    programs: [Program]
    program(programId: ID!): Program
}

type Mutation {

    createProgram(input: ProgramInput!): Program!
    updateProgram(programId: ID!, input: ProgramInput!): Program!
    deleteProgram(programId: ID!): Program
}

type Subscription {

    newProgramSubscription: Program
}