type Workout {
    _id: ID!
    authorId: ID!
    author: User!
    title: String!
    difficulty: Difficulty!
    description: String
    equipment: [String!]!
    muscleGroups: [String!]!
    exercises: [WorkoutExercise!]!
    createdAt: String!
    createdAtFormatted: String!
    updatedAt: String!
    updatedAtFormatted: String!
    totalEquipment: Int!
    totalExercises: Int!
    totalMuscleGroups: Int!
}

type WorkoutExercise {
    exercise: Exercise!
    sets: Int!
    repetitions: Int!
}

input WorkoutInput {
    title: String!
    difficulty: String!
    description: String
    exercises: [ExerciseInput]!
}

input WorkoutInfoInput {
    title: String!
    difficulty: String!
    description: String
}

input ExerciseInput {
    exerciseId: String!
    sets: Int
    repetitions: Int
}

enum Difficulty {
    BEGINNER
    INTERMEDIATE
    ADVANCED
}

type Query {
    workouts: [Workout]
    workoutsByAuthor(authorId: ID!): [Workout]
    workout(workoutId: ID!): Workout
}

type Mutation {
    createWorkout(input: WorkoutInput!): Workout!
    updateWorkoutInfo(workoutId: ID!, input: WorkoutInfoInput!): Workout
    deleteWorkout(workoutId: ID!): Workout
    addExerciseToWorkout(workoutId: ID!, input: ExerciseInput!): Workout
    removeExerciseFromWorkout(workoutId: ID!, exerciseId: String!): Workout
}

type Subscription {
    newWorkoutSubscription: Workout
}